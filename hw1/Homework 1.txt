1.2-2
For values of n less than 6, insertion sort beats merge sort.

1.2-3
15 is the smallest value of n such that the algorithm whose runtime is 100n^2 is better.

Problem 1-1
	1 SECOND ... ETCETERA
lg(n)	2^1,000,000
sqrt(n)	1,000,000^2 = 10^12
n	1,000,000
n*lg(n)	e^W(1000000log(2)) = 62746
n^2	sqrt(1,000,000) = 1,000
n^3	cbrt(1,000,000) = 100
2^n	lg(1,000,000) = 19
n!	9

2.1-1
{31,41,59,26,41,58}
{26,31,41,59,41,58}
{26,31,41,59,41,58}
{26,31,41,59,41,58}
{26,31,41,41,59,58}
{26,31,41,41,58,59}

2.1-3
for i = 0 to the length of A do:
	if A[i] = v do:
		return i
return NIL

Loop Invariant: For each value i, there is no index x < i such that A[i] = v.

Initialization: When initializing, i = 0. There is no value of x less than 0 such that A[x] = v.
Maintenance: The loop continues if, for the current value of i, A[i] does not equal v. During the next iteration, the value of i will be (i+1). Therefore, for each incrementing value of i, there is not a value x less than i such that A[x] = v.
Termination: The algorithm will terminate and return a value under two conditions:
	- If all valid values of i have been exhausted; that is to say, a value x such that A[x] = v is not found in the range between 0 and the length of A, the loop will exhaust and the algorithm will return a value of NIL.
	- If a value of i is found such that A[i] = v, the loop will return i, the first index of A such that A[i] = v.

2.2-1
Theta(n^3), since the leading term of the polynomial n^3/1000 - 100n^2 - 100n + 3 is n^3

2.2-2
for n = 0 to A.length do:
	set l = INFINITY
	set i = NIL
	for m = n to A.length do:
		if A[m] < l do:
			set l = A[m]
			set i = m
	if i != NIL do:
		swap A[n] with A[i]
return

Loop Invariant: The first n items of A form a sorted subarray B such that every element in B is less than every element in A.

The algorithm only needs to run for the first (n-1) elements, because the nth element always has a greater value than all of the first (n-1); therefore, by the time the algorithm gets to the nth element, it is known that it is the greatest-value element in the array.

The best and worst case for selection sort is Theta(n^2) - in all cases, comparisons and swaps over the entire array need to be made.

2.2-3
For an array of size n, in the average case it will need to search half the array, therefore Theta(n/2). In the worst case, it will have to search the entire array, therefore Theta(n).

2.3-1
{3,41,52,26,38,57,9,49}
{3,41,52,26} {38,57,9,49}
{3,41} {52,26} {38,57} {9,49}
{3} {41} {52} {26} {38} {57} {9} {49}
{3,41} {26,52} {38,57} {9,49}
{3,26,41,52} {9,38,49,57}
{3,9,26,38,41,49,52,57}

2.3-3
Proof on paper

2.3-5
Let A be an array sorted in ascending order (least to greatest)
define function BinarySearch(array, value):
	set n = floor(array.length / 2)
	if array[n] == value do:
		return n;
	if array[n] > value do:
		set B = subarray of array[0 to n]
		BinarySearch(B, value)
	if array[n] < value do:
		set B = subarray of array[n to array.length]
		BinarySearch(B, value)
	return NIL;

2.3-6
Insertion sort, regardless of this optimization, still iterates forward over the unsorted segment of the array, meaning that the runtime is at least n, the length of the array. For each element n, some sorting procedure needs to take place; performing a binary search on the sorted portion of the array means that for every element n, a runtime of at worst lg(n) takes place. This brings the overall asymptotic runtime of the improved Insertion Sort procedure to Theta(n * lg(n)).